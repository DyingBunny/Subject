#include<iostream>
#include<vector>
using namespace std;

//判断
int Judge(int n,int m)
{
	int i =n;
	int x,y;
	int cout = 0;
	int MaxNum=0;
	vector<int> EveNum;
	for (; i <= m; i++)
	{
		//将每一位放入vector中
		for (x = i; x > 0; x /= 10)
		{
			y = x % 10;
			EveNum.push_back(y);
			MaxNum++;
		}
		//进行判断
		vector<int>::iterator pd;
		vector<int>::iterator pd1;
		vector<int>::iterator tmp;
		if (MaxNum == 1)
		{
			cout += 0;
		}
		else if (MaxNum == 2)
		{
			pd = EveNum.begin();
			if (*pd==*(pd+1))
			{ 
				cout++;
			}
		}
		else
		{		
			for (pd = (EveNum.begin()); pd != EveNum.end(); pd++)
			{
				for (pd1=pd + 1; pd1!= EveNum.end(); pd1++)
				{
					tmp = EveNum.begin();
				loop1:
					if (&(*tmp) == &(*pd) || &(*tmp) == &(*pd1))
					{
						tmp++;
						goto loop1;
					}
					else
					{
						if ((*pd + (*pd1)) == *tmp)
						{
							cout++;
							goto loop;
						}
					}
				}
			}
		}
		loop:
		MaxNum = 0;
		EveNum.clear();

	}
	return cout;
}

int main()
{
	int n, m, MaxNum;
	int result;
	scanf("%d%d", &n, &m);
	result = Judge(n, m);
	printf("%d", result);
	system("pause");
	return 0;
}

----------------------------------100%通过------------------------
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool IsNum(int &in){
	vector<int> arry;
	int num = in;
	int half = 0;
	while (num){//将数字打散存入arry数组
		arry.push_back(num % 10);
		half += num % 10;
		num /= 10;
	}
	if (half % 2 != 0) return false;
	half /= 2;
	vector<int> dp(half + 1); //之后这一小段用的是01背包，判断能装下最大的数和一半是否相等。
	for (int i = 0; i<arry.size(); i++){
		for (int j = half; j >= arry[i]; j--){
			dp[j] = max(dp[j], dp[j - arry[i]] + arry[i]);
		}
	}
	return dp[half] == half;
}



int main()
{
	int l, r;
	cin >> l >> r;
	int count = 0;
	for (int i = l; i <= r; i++){
		if (IsNum(i))
			count++;//如果是神奇数，计数+1
	}
	cout << count << endl;
	system("pause");
	return 0;
}

